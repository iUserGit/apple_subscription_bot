import json
import requests
import base64
import os
from flask import Flask, request
from jose import jwk
from jose.utils import base64url_decode

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
APPLE_PUBLIC_KEY_URL_PROD = 'https://appleid.apple.com/auth/keys'
APPLE_PUBLIC_KEY_URL_SANDBOX = 'https://appleid.apple.com/auth/keys'

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

app = Flask(__name__)

def get_apple_public_keys(environment):
    url = APPLE_PUBLIC_KEY_URL_SANDBOX if environment == "sandbox" else APPLE_PUBLIC_KEY_URL_PROD
    response = requests.get(url)
    if response.status_code == 200:
        return response.json().get('keys', [])
    return []

def load_jwk_key(key_data):
    try:
        return jwk.construct(key_data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JWK: {e}")
        return None

def verify_signature(payload: dict, signature: str, key_data: dict) -> bool:
    key = load_jwk_key(key_data)
    if not key:
        return False

    try:
        decoded_signature = base64url_decode(signature.encode())
        message = json.dumps(payload, separators=(',', ':')).encode('utf-8')

        if key.verify(message, decoded_signature):
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏: {e}")
    return False

def extract_purchase_data(notification_data):
    return (
        notification_data.get("auto_renew_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"),
        notification_data.get("product_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"),
        notification_data.get("bundle_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Bundle ID"),
        notification_data.get("version", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è"),
        notification_data.get("purchase_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞")
    )

def send_telegram_message(message: str):
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }
    response = requests.post(TELEGRAM_API_URL, data=payload)
    return response.json()

@app.route('/apple-webhook', methods=['POST'])
def apple_webhook():
    data = request.json

    if 'signed_data' not in data:
        return json.dumps({"error": "–ù–µ—Ç signed_data"}), 400

    signed_data = data['signed_data']
    environment = data.get("environment", "production")

    public_keys = get_apple_public_keys(environment)
    if not public_keys:
        return json.dumps({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏"}), 400

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –ø—Ä–æ–≤–µ—Ä—è—è –ø–æ 'kid' –∑–∞–≥–æ–ª–æ–≤–∫—É JWT)
    if not verify_signature(signed_data['data'], signed_data['signature'], public_keys[0]):
        return json.dumps({"error": "–ü–æ–¥–ø–∏—Å—å –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"}), 400

    auto_renew_status, product_id, bundle_id, version, purchase_date = extract_purchase_data(signed_data['data'])

    message = f"""
> –ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({'–æ—Ç–∫–ª—é—á–∏–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' if auto_renew_status == 'disabled' else '–≤–∫–ª—é—á–∏–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'})
üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product_id}
üì± Bundle ID: {bundle_id}
üì¶ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {version}
üïí –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}
    """
    send_telegram_message(message)
    return "OK", 200

if __name__ == '__main__':
    port = int(os.getenv("PORT", 5000))
    app.run(debug=True, host='0.0.0.0', port=port)

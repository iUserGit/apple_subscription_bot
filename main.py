import os
import json
import base64
import hashlib
import hmac
import telegram
import asyncio
from quart import Quart, request, jsonify
import jwt
from jwt.exceptions import InvalidTokenError

app = Quart(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
APPLE_SHARED_SECRET = os.getenv('APPLE_SHARED_SECRET')

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)

def verify_apple_signature(payload, signature):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Apple.
    """
    try:
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º APPLE_SHARED_SECRET
        decoded_signature = base64.b64decode(signature)
        
        # –•–µ—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º APPLE_SHARED_SECRET
        expected_signature = hmac.new(APPLE_SHARED_SECRET.encode(), payload.encode(), hashlib.sha256).digest()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å —Å –ø–æ–ª—É—á–µ–Ω–Ω–æ–π
        if decoded_signature == expected_signature:
            return True
        else:
            app.logger.error("Calculated signature does not match received signature")
            return False
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

@app.route('/apple_webhook', methods=['POST'])
async def apple_webhook():
   data = await request.get_json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    app.logger.info(f"Received data: {data}")

    if not data:
        app.logger.error('No data received!')
        return jsonify({'error': 'No data received'}), 400

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    payload = json.dumps(data.get('payload'))
    signature = data.get('signature')

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ –∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    app.logger.info(f"Received signature: {signature}")
    app.logger.info(f"Payload for signature verification: {payload}")

    if not signature or not verify_apple_signature(payload, signature):
        app.logger.error("Invalid signature from Apple.")
        return jsonify({'error': 'Invalid signature'}), 400

    # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ payload
    product = data.get('product_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
    bundle_id = data.get('bundle_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Bundle ID')
    version = data.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è')
    purchase_date = data.get('purchase_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏')

    message = (
        f"> –ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product}\n"
        f"üì± Bundle ID: {bundle_id}\n"
        f"üì¶ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {version}\n"
        f"üïí –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}"
    )

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    app.logger.info(f"Sending message to Telegram: {message}")

    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        app.logger.info('Message sent to Telegram successfully.')
    except Exception as e:
        app.logger.error(f"Failed to send message to Telegram: {e}")

    return jsonify({'status': 'success'}), 200

if __name__ == '__main__':
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5000
    port = int(os.getenv('PORT', 5000))
    app.run(debug=True, host='0.0.0.0', port=port)

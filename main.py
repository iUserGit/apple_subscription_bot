import json
import requests
import base64
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
from flask import Flask, request
import os

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
APPLE_PUBLIC_KEY_URL_PROD = 'https://appleid.apple.com/auth/keys'  # –¥–ª—è production
APPLE_PUBLIC_KEY_URL_SANDBOX = 'https://sandbox.itunes.apple.com/verifyReceipt'  # –¥–ª—è sandbox

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

# –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ Apple –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
def get_apple_public_keys(environment):
    if environment == "sandbox":
        response = requests.get(APPLE_PUBLIC_KEY_URL_SANDBOX)
    else:
        response = requests.get(APPLE_PUBLIC_KEY_URL_PROD)
        
    if response.status_code == 200:
        return response.json()['keys']
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
def load_public_key(pem_data):
    return serialization.load_pem_public_key(pem_data.encode(), backend=default_backend())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
def verify_signature(data, signature, public_key):
    try:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º base64-–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        signature = base64.b64decode(signature)
        data = json.dumps(data).encode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        public_key.verify(
            signature,
            data,
            padding.PKCS1v15(),
            hashes.SHA256()
        )
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def extract_purchase_data(notification_data):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    auto_renew_status = notification_data.get("auto_renew_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    product_id = notification_data.get("product_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
    bundle_id = notification_data.get("bundle_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Bundle ID")
    version = notification_data.get("version", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    purchase_date = notification_data.get("purchase_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞")
    
    return auto_renew_status, product_id, bundle_id, version, purchase_date

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(message: str):
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'  # —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
    }
    response = requests.post(TELEGRAM_API_URL, data=payload)
    return response.json()

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
@app.route('/apple-webhook', methods=['POST'])
def apple_webhook():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.json
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")  # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if 'signed_data' not in data:
            print("–ù–µ—Ç –ø–æ–ª—è 'signed_data' –≤ –∑–∞–ø—Ä–æ—Å–µ.")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 400

        signed_data = data['signed_data']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (production –∏–ª–∏ sandbox)
        environment = data.get("environment", "production")

        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ Apple
        public_keys = get_apple_public_keys(environment)
        if not public_keys:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ Apple.")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ Apple", 400

        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑—å–º–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π)
        public_key = load_public_key(public_keys[0]['publicKey'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not verify_signature(signed_data['data'], signed_data['signature'], public_key):
            print("–ü–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞.")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            return "–ü–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞", 400

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        auto_renew_status, product_id, bundle_id, version, purchase_date = extract_purchase_data(signed_data['data'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        message = f"""
> –ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({'–æ—Ç–∫–ª—é—á–∏–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' if auto_renew_status == 'disabled' else '–≤–∫–ª—é—á–∏–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'})
üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product_id}
üì± Bundle ID: {bundle_id}
üì¶ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {version}
üïí –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        telegram_response = send_telegram_message(message)
        print(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram: {telegram_response}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Telegram
        
        return "OK", 200

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        return str(e), 500

if __name__ == '__main__':
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.getenv("PORT", 5000))
    app.run(debug=True, host='0.0.0.0', port=port)

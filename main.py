import os
import json
from fastapi import FastAPI, Request
import httpx
from jose import jwt
from datetime import datetime, timezone

app = FastAPI()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

notification_map = {
    "DID_CHANGE_RENEWAL_PREF": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É",
    "DID_RENEW": "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞",
    "CANCEL": "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
    "INITIAL_BUY": "–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
    "DID_FAIL_TO_RENEW": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
    "DID_RECOVER": "–ü–æ–¥–ø–∏—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
    "DID_CHANGE_RENEWAL_STATUS": "–ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
    "REFUND": "–ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –≤–æ–∑–≤—Ä–∞—Ç",
}

subtype_map = {
    "DOWNGRADE": "–ø–æ–Ω–∏–∑–∏–ª —É—Ä–æ–≤–µ–Ω—å",
    "UPGRADE": "–ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å",
    "AUTO_RENEW_ENABLED": "–≤–∫–ª—é—á–∏–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
    "AUTO_RENEW_DISABLED": "–æ—Ç–∫–ª—é—á–∏–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
    "VOLUNTARY": "–æ—Ç–º–µ–Ω–∏–ª –≤—Ä—É—á–Ω—É—é",
}

def format_date(ms_timestamp: str) -> str:
    try:
        ts = int(ms_timestamp) / 1000  # –∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ —Å–µ–∫—É–Ω–¥—ã
        dt = datetime.fromtimestamp(ts, tz=timezone.utc)
        return dt.strftime("%d %B %Y, %H:%M UTC")
    except Exception:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

@app.post("/apple_webhook")
async def apple_webhook(request: Request):
    payload = await request.json()

    signed_payload = payload.get("signedPayload")
    if not signed_payload:
        await send_telegram_message("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ signedPayload")
        return {"status": "ignored"}

    try:
        decoded_payload = jwt.get_unverified_claims(signed_payload)

        notification_type = decoded_payload.get("notificationType", "UNKNOWN")
        subtype = decoded_payload.get("subtype", "NONE")

        data = decoded_payload.get("data", {})
        product_id = data.get("productId", "N/A")
        bundle_id = data.get("bundleId", "N/A")
        bundle_version = data.get("bundleVersion", "N/A")
        purchase_date_raw = data.get("purchaseDate", None)
        purchase_date = format_date(purchase_date_raw) if purchase_date_raw else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        readable_type = notification_map.get(notification_type, notification_type)
        readable_subtype = subtype_map.get(subtype, subtype)

        message = (
            f"üì¨ {readable_type}"
            + (f" ({readable_subtype})" if readable_subtype else "") + "\n\n"
            f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product_id}\n"
            f"üì± Bundle ID: {bundle_id}\n"
            f"üì¶ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {bundle_version}\n"
            f"üïí –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}"
        )

        await send_telegram_message(message)
    except Exception as e:
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ payload: {str(e)}")

    return {"status": "processed"}

async def send_telegram_message(text: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text
    }

    async with httpx.AsyncClient() as client:
        await client.post(url, json=payload)

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run("main:app", host="0.0.0.0", port=port)

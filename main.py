import os
import json
import telegram
import asyncio
from quart import Quart, request, jsonify
import jwt
from jwt.exceptions import InvalidSignatureError

app = Quart(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
APPLE_SHARED_SECRET = os.getenv('APPLE_SHARED_SECRET')

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)

@app.route('/apple_webhook', methods=['POST'])
async def apple_webhook():
    data = await request.get_json()

    if not data or 'signedPayload' not in data:
        app.logger.error("No signedPayload provided.")
        return jsonify({'error': 'No signedPayload'}), 400

    signed_payload = data['signedPayload']

    try:
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ JWT-–ø–æ–¥–ø–∏—Å–∏ –æ—Ç Apple
        decoded = jwt.decode(
            signed_payload,
            APPLE_SHARED_SECRET,
            algorithms=['HS256'],
            options={"verify_exp": False}  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        )
        app.logger.info(f"Decoded payload: {json.dumps(decoded, indent=2)}")
    except InvalidSignatureError:
        app.logger.error("Invalid signature from Apple.")
        return jsonify({'error': 'Invalid signature'}), 400
    except Exception as e:
        app.logger.error(f"JWT decode error: {e}")
        return jsonify({'error': 'JWT decode error'}), 400

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ payload
    notification_type = decoded.get("notificationType", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    subtype = decoded.get("subtype", "")
    data_object = decoded.get("data", {})
    product_id = data_object.get("productId", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
    bundle_id = data_object.get("bundleId", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Bundle ID")
    purchase_date = data_object.get("purchaseDate", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞")

    message = (
        f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Apple: {notification_type} {f'({subtype})' if subtype else ''}\n"
        f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: {product_id}\n"
        f"üì± Bundle ID: {bundle_id}\n"
        f"üïí –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}"
    )

    app.logger.info(f"Sending message to Telegram: {message}")

    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        app.logger.info("Message sent to Telegram successfully.")
    except Exception as e:
        app.logger.error(f"Failed to send message to Telegram: {e}")

    return jsonify({'status': 'success'}), 200

@app.route('/', methods=['GET'])
async def root():
    return jsonify({"status": "running"}), 200

if __name__ == '__main__':
    port = int(os.getenv("PORT", 5000))
    app.run(debug=True, host='0.0.0.0', port=port)
